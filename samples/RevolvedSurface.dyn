{
  "Uuid": "3c9d0464-8643-5ffe-96e5-ab1769818209",
  "IsCustomNode": false,
  "Description": "",
  "Name": "RevolvedSurface",
  "ElementResolver": {
    "ResolutionMap": {
      "Line.ByStartPointEndPoint": {
        "Key": "Autodesk.DesignScript.Geometry.Line",
        "Value": "ProtoGeometry.dll"
      },
      "Point": {
        "Key": "Autodesk.DesignScript.Geometry.Point",
        "Value": "ProtoGeometry.dll"
      }
    }
  },
  "Inputs": [
    {
      "Id": "0a239b91589c434fbc5b175e539fd63c",
      "Name": "Number",
      "Type": "number",
      "Type2": "number",
      "Value": "0",
      "NumberType": "Double",
      "Description": "Creates a number",
      "SelectedIndex": 0
    },
    {
      "Id": "88f74a7e1a5b4eaaad053b5f48764497",
      "Name": "Divisions on Y direction",
      "Type": "number",
      "Type2": "number",
      "Value": "17",
      "MaximumValue": 50.0,
      "MinimumValue": 0.0,
      "StepValue": 1.0,
      "NumberType": "Double",
      "Description": "Produces numeric values",
      "SelectedIndex": 0
    },
    {
      "Id": "b12d0e8a56c043b2a82984be33e4c96b",
      "Name": "Divisions on X direction",
      "Type": "number",
      "Type2": "number",
      "Value": "16",
      "MaximumValue": 50.0,
      "MinimumValue": 0.0,
      "StepValue": 1.0,
      "NumberType": "Double",
      "Description": "Produces numeric values",
      "SelectedIndex": 0
    },
    {
      "Id": "f6edf081aa6c43bca02c47c47afd392b",
      "Name": "Number",
      "Type": "number",
      "Type2": "number",
      "Value": "1",
      "NumberType": "Double",
      "Description": "Creates a number",
      "SelectedIndex": 0
    }
  ],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Surface.ByRevolve@Autodesk.DesignScript.Geometry.Curve,Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Vector,double,double",
      "Id": "7543f3425b4b4f5699cb8f3277034772",
      "Inputs": [
        {
          "Id": "58b03b72fe034ba9bb64a05e3c35acc6",
          "Name": "profile",
          "Description": "Profile curve to revolve\n\nCurve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "55b2e4e9a2344988a7af692f871be00f",
          "Name": "axisOrigin",
          "Description": "Revolving axis origin\n\nPoint\nDefault value : Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "78bdcae9d2b54a5186fabeb0a8d8daca",
          "Name": "axisDirection",
          "Description": "Revolving axis direction\n\nVector\nDefault value : Autodesk.DesignScript.Geometry.Vector.ByCoordinates(0, 0, 1)",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5fcfc77bdb61443b91b3e740cbcf91da",
          "Name": "startAngle",
          "Description": "Start angle in degrees\n\ndouble\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6bed087a724144a19ec178b3456a36af",
          "Name": "sweepAngle",
          "Description": "Sweep angle in degrees\n\ndouble\nDefault value : 180",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0d85e0b7bed4475796a3bafd561b81dd",
          "Name": "Surface",
          "Description": "Surface created by revolving profile",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a Surface by sweeping the profile Curve around the axis ray formed by origin Point in the direction of the axis Vector, starting at start_angle in degrees, sweeping sweep_angle in degrees.\n\nSurface.ByRevolve (profile: Curve, axisOrigin: Point = Autodesk.DesignScript.Geometry.Point.ByCoordinates(0, 0, 0), axisDirection: Vector = Autodesk.DesignScript.Geometry.Vector.ByCoordinates(0, 0, 1), startAngle: double = 0, sweepAngle: double = 180): Surface"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Line.ByStartPointEndPoint@Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point",
      "Id": "d4c9ae2ca651431eaa0ab9f9c1f37ddc",
      "Inputs": [
        {
          "Id": "c6c172909dad4abaa821edea96193a01",
          "Name": "startPoint",
          "Description": "Line start point\n\nPoint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "55974f71b2b4477695d46d806e1bebe5",
          "Name": "endPoint",
          "Description": "Line end point\n\nPoint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "775a143f6c834a56ad3b77e60e9a3c2e",
          "Name": "Line",
          "Description": "Line from start and end point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a straight Line between two input Points.\n\nLine.ByStartPointEndPoint (startPoint: Point, endPoint: Point): Line"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "Point.ByCoordinates(25000,10000,10000);",
      "Id": "24f74ee9311f430ca70f0d2635bf4502",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "253e73dc4d3441fb81ecf25cf4d0f8a0",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "Point.ByCoordinates(10000,-5000,0);",
      "Id": "18484e70a95c49778b42294f5aa4a17f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8297ab8f58b141d18f82708a49dccd20",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "surface;",
      "Id": "e355669081764a71aaaa3f7cbdb8525e",
      "Inputs": [
        {
          "Id": "cd12cc012c3744b0b76813137082cca1",
          "Name": "surface",
          "Description": "surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bcbe933082124965b54f170c52217e0a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Curve.ByIsoCurveOnSurface@Autodesk.DesignScript.Geometry.Surface,int,double",
      "Id": "cb27966ffad644a7861e7172f40dae60",
      "Inputs": [
        {
          "Id": "ad596d47c1014cbd8d43f7e95faa471c",
          "Name": "baseSurface",
          "Description": "Base surface\n\nSurface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "28e0b89477944995ab9ddb8a685cefec",
          "Name": "direction",
          "Description": "if 0 isoline is along u direction, if 1 along v direction\n\nint\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "399702e64fb84e12af5d110a641c8766",
          "Name": "parameter",
          "Description": "fixed for the curve value of other surface parameter\n\ndouble\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e142a1a0b75f47aa9fd28bc7474ce297",
          "Name": "Curve",
          "Description": "Isocurve on surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "CrossProduct",
      "Description": "Create a curve by isoline of surface\n\nCurve.ByIsoCurveOnSurface (baseSurface: Surface, direction: int = 0, parameter: double = 0): Curve"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0..1..#x;",
      "Id": "e1746c936b554e588b1c7ef7df8de755",
      "Inputs": [
        {
          "Id": "b6ab22ca9a154693a96f410a0c6be439",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c200597f1e8b4452b97c929356169c11",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Curve.ByIsoCurveOnSurface@Autodesk.DesignScript.Geometry.Surface,int,double",
      "Id": "e23beeda2e144601ac3175133a885908",
      "Inputs": [
        {
          "Id": "d277f7f74c654c39945ec84045bab329",
          "Name": "baseSurface",
          "Description": "Base surface\n\nSurface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6f6d5f4f752d49628a84a523446009c8",
          "Name": "direction",
          "Description": "if 0 isoline is along u direction, if 1 along v direction\n\nint\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7e9a302a8a41473a9117de18b5d33655",
          "Name": "parameter",
          "Description": "fixed for the curve value of other surface parameter\n\ndouble\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7814654e0b2747b782f5417ae46333bf",
          "Name": "Curve",
          "Description": "Isocurve on surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "CrossProduct",
      "Description": "Create a curve by isoline of surface\n\nCurve.ByIsoCurveOnSurface (baseSurface: Surface, direction: int = 0, parameter: double = 0): Curve"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "8543d6ac120241c4989e1a243e398ac4",
      "Inputs": [
        {
          "Id": "b0e97b56ef484058992d9f687d88a07b",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9c5a9c3ded4644be8ebee0151e45a2f4",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "beff9161b6e2455ea54b51749add5752",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "c08c05a5b5a845ac8e9ed6f3b64aa3f2",
      "Inputs": [
        {
          "Id": "e0b57a567c934fb9af736a8f57a1c40e",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "437b5bd2f236425e9e7530f2b5d95bd5",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c0d5156b61cf40bbb8317014eaf55368",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleInput, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "InputValue": 0.0,
      "Id": "0a239b91589c434fbc5b175e539fd63c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a9c9eef4ffd5426fb4255d6670424a22",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a number"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 50.0,
      "MinimumValue": 0.0,
      "StepValue": 1.0,
      "InputValue": 17.0,
      "Id": "88f74a7e1a5b4eaaad053b5f48764497",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "16fa0e9b133846c98c3a0ff65a5f9589",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Produces numeric values"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 50.0,
      "MinimumValue": 0.0,
      "StepValue": 1.0,
      "InputValue": 16.0,
      "Id": "b12d0e8a56c043b2a82984be33e4c96b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1cd8b57d939042fe8bdeb0214518611e",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Produces numeric values"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Geometry.Intersect@Autodesk.DesignScript.Geometry.Geometry",
      "Id": "37e5bfec59f44aa98789464651a8b7c0",
      "Inputs": [
        {
          "Id": "d288dae708824d94be0e776cee1c1682",
          "Name": "geometry",
          "Description": "Autodesk.DesignScript.Geometry.Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "baee6100e11d4273a7f7abffa440ab4e",
          "Name": "other",
          "Description": "Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "cf104ffaeb0f4b11953fffb305aacba2",
          "Name": "Geometry[]",
          "Description": "Geometry[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "CrossProduct",
      "Description": "Get the intersection Geometry for this object and another\n\nGeometry.Intersect (other: Geometry): Geometry[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleInput, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "InputValue": 1.0,
      "Id": "f6edf081aa6c43bca02c47c47afd392b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "cb943230de1349a1abfefe77344f4b17",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a number"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0..1..#x;",
      "Id": "73ffd2271e734b6fbc906f5ca634ccb6",
      "Inputs": [
        {
          "Id": "c6f0d29778614df3817d5ff626d74f47",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0f8e46dfe49c496183b001e3a42501d9",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "f1e1c03edf954af5813b47515df36cdf",
      "Inputs": [
        {
          "Id": "1fa3ac6bf7bd46688aa9e144423dd7d4",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "62ff479f9aa745c287dd167297d616e7",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a35737f79d614ee8bb1d5de10fb180b6",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Count@var[]..[]",
      "Id": "840bc3fd7e354bdbb2f87b09427af2ee",
      "Inputs": [
        {
          "Id": "14bb3b242bed4dca8bdb30a706c3c2af",
          "Name": "list",
          "Description": "List to get the item count of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a1878df77cdc48ddadb0a599de312411",
          "Name": "int",
          "Description": "List length.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the number of items stored in the given list.\n\nList.Count (list: var[]..[]): int"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "/@var[]..[],var[]..[]",
      "Id": "cf379fb3c60641b1bbdb3056dafab557",
      "Inputs": [
        {
          "Id": "06f8da9cb5f6428eac8c88d7e367052b",
          "Name": "x",
          "Description": "Integer or double value\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fe24ecdf404243a592594008bd87751a",
          "Name": "y",
          "Description": "Integer or double value\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c7cf2f97f9f049369bf3d570b04a6ce5",
          "Name": "double",
          "Description": "Result of division",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns division of x over y\n\n/ (x: var[]..[], y: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Chop@var[]..[],int[]",
      "Id": "ab3e84b737fd4a439ce1b986dcdfa6f5",
      "Inputs": [
        {
          "Id": "b0b812cc65bf45d1a05d3ae572c74456",
          "Name": "list",
          "Description": "List to chop into sublists\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c3dc53adf2234762882b2557076b2543",
          "Name": "lengths",
          "Description": "Lengths of consecutive sublists to be created from the input list\n\nint[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c48726ee2cf148bebe4eeba0034c75fe",
          "Name": "lists",
          "Description": "Sublists created from the list",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Chop a list into a set of consecutive sublists with the specified lengths. List division begins at the top of the list.\n\nList.Chop (list: var[]..[], lengths: int[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Count@var[]..[]",
      "Id": "74d9e44422aa493abd1e99ed94e1347e",
      "Inputs": [
        {
          "Id": "db4066b4f7dd4c66b342e9b654d86a7f",
          "Name": "list",
          "Description": "List to get the item count of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "df151c94c0694ed89ce547035b86fe61",
          "Name": "int",
          "Description": "List length.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the number of items stored in the given list.\n\nList.Count (list: var[]..[]): int"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n#The inputs to this node will be stored as a list in the IN variable.\r\ninp = IN[0]\r\n\r\n#Assign your output to the OUT variable\r\n\r\nstart = []\r\nend = []\r\nfor i in range(len(inp)):\r\n for j in range(len(inp[i])-1):\r\n  start.append(inp[i][j])\r\n  end.append(inp[i][j+1])\r\nOUT = [start,end]",
      "Engine": "CPython3",
      "EngineName": "CPython3",
      "VariableInputPorts": true,
      "Id": "bf3bc1920fc943108df5f2bf992fcc57",
      "Inputs": [
        {
          "Id": "1f29eebfdb5d4921b0db3637e9ef5b12",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d7ffad3c634840e5a9f540ac09c4c11e",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x[0];\nx[1];",
      "Id": "eca53342d4fc4582b75be7f336240cc0",
      "Inputs": [
        {
          "Id": "0f87f000683e401199052497a360e54e",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ddfc80aed85f4c6fb00afeb39be9d168",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1a7eede2aa1b42d89720bf81bbc3324f",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Vector.ZAxis",
      "Id": "45385228d515483d83be3fcf8d4c80d4",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1e89520a58f7479a91ea55028c2d5672",
          "Name": "Vector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the canonical Z axis Vector (0,0,1)\n\nVector.ZAxis ( ): Vector"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "1..x-1..1;",
      "Id": "9c56e6ad865a4d16a2fdfef615f8266e",
      "Inputs": [
        {
          "Id": "00a0a9af5217441dba4185b228187b95",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "86ee8b7f44274229ae20a7cdc1a094af",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0..x-2..1;",
      "Id": "11690a018ee343f0ab9d341239c83e44",
      "Inputs": [
        {
          "Id": "a9c7d6fbc9b84079a08f87d65dfd96ab",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4dac78003b9541fd9cc761c73e5457e9",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "55f265ac94204639b9bab2cb52330eb6",
      "Inputs": [
        {
          "Id": "59b90c6672074f72928a2e3c28e4bc5d",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "eddda68331924ac28a9587021664a47a",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "21610c6d72d446b9acd0b3592b1f0f5d",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "9648bb997c864ff3890d7df52c80aa7d",
      "Inputs": [
        {
          "Id": "93cae8d5e971465a94800da8d7b22657",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "709be89a9b13419e9a24f11ead4e5349",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bb6b9a4959e741d6ad71bbbad52ded63",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x[i];",
      "Id": "f2f24be1fd3743d8a94f1cbc67e07def",
      "Inputs": [
        {
          "Id": "fb5b8ddb80314cc9bb661b71b75c5c3e",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b365de49e5cc48748aff14c3a12d722a",
          "Name": "i",
          "Description": "i",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c81a722cd76445f2bc0a43c9fac3a8e2",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "96954312c3fd4cbc80cf77a713ae8e61",
      "Inputs": [
        {
          "Id": "e6478c505f544273a9b768eead211ce5",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ee2eeff4e01b4984b676d1156e63cdb4",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "02f6d9661e1a4f0087f2ab0e3fb91533",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "22a7a06f9b604c6c90d842df29eae9be",
      "Inputs": [
        {
          "Id": "67017dd0791a45119daa766b611aa6bb",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "390da9009e874f798d5f6d4906317bdf",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "022827826a2d4c4ab6ec325a610b28f7",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Surface.NormalAtPoint@Autodesk.DesignScript.Geometry.Point",
      "Id": "c76d13c724ff46deaa1adc9d4e8686c6",
      "Inputs": [
        {
          "Id": "ac8eb70d892d423b9955d46412e948c3",
          "Name": "surface",
          "Description": "Autodesk.DesignScript.Geometry.Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "62ff63d5f54e4be89ee9d98d1e98976b",
          "Name": "point",
          "Description": "Point at which to evaluate surface normal\n\nPoint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c6c97c2667a8498c836dce3517799b2d",
          "Name": "Vector",
          "Description": "Normal at point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Return the surface normal at the input Point on the Surface.\n\nSurface.NormalAtPoint (point: Point): Vector"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Surface.NormalAtPoint@Autodesk.DesignScript.Geometry.Point",
      "Id": "6102cda0da684d4e8ca4c9e23ae2f537",
      "Inputs": [
        {
          "Id": "c8622142e2534041972daec88ceca5a2",
          "Name": "surface",
          "Description": "Autodesk.DesignScript.Geometry.Surface",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "98d055bbd3e542508cda06ed20adbc67",
          "Name": "point",
          "Description": "Point at which to evaluate surface normal\n\nPoint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "590a8bdb7d7946dabdab58e3f07e3f6b",
          "Name": "Vector",
          "Description": "Normal at point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Return the surface normal at the input Point on the Surface.\n\nSurface.NormalAtPoint (point: Point): Vector"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "AdvanceSteel.Nodes.Beams.StraightBeam.ByStartPointEndPoint@Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Vector,AdvanceSteel.Nodes.Property[]",
      "Id": "7755d6a112244e72ac8f71620c0b1f14",
      "Inputs": [
        {
          "Id": "2b70a36b22514bcb8dcc61ddde556fec",
          "Name": "start",
          "Description": "Input Start point of Beam\n\nPoint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5a3f250866f348898221c5c2b4487213",
          "Name": "end",
          "Description": "Input End point of Beam\n\nPoint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6432dfef41084ddaa5f9224f4fe25b95",
          "Name": "orientation",
          "Description": "Section orientation\n\nVector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7fe7ecc74250428ca2a742e816520f88",
          "Name": "additionalBeamParameters",
          "Description": "Optional Input Beam Build Properties\n\nProperty[]\nDefault value : null",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "601fd06ef9654d24816f926c8da9718f",
          "Name": "straightBeam",
          "Description": "beam",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create an Advance Steel straight beam between two points\n\nStraightBeam.ByStartPointEndPoint (start: Point, end: Point, orientation: Vector, additionalBeamParameters: Property[] = null): StraightBeam"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "AdvanceSteel.Nodes.Beams.StraightBeam.ByStartPointEndPoint@Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Vector,AdvanceSteel.Nodes.Property[]",
      "Id": "666412dbd9a84f2c8538e60fc2f83318",
      "Inputs": [
        {
          "Id": "a4c60378f6bc409381509e573d7daa57",
          "Name": "start",
          "Description": "Input Start point of Beam\n\nPoint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0d19ab06e066416abf9e4c111a9b5c7f",
          "Name": "end",
          "Description": "Input End point of Beam\n\nPoint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b91c9e6ab1794f9dbb7acd872226521b",
          "Name": "orientation",
          "Description": "Section orientation\n\nVector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1d9ea85059ab455fb5becef9134eec3c",
          "Name": "additionalBeamParameters",
          "Description": "Optional Input Beam Build Properties\n\nProperty[]\nDefault value : null",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6d6c2f92fe3947d480161043d3f6021f",
          "Name": "straightBeam",
          "Description": "beam",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create an Advance Steel straight beam between two points\n\nStraightBeam.ByStartPointEndPoint (start: Point, end: Point, orientation: Vector, additionalBeamParameters: Property[] = null): StraightBeam"
    }
  ],
  "Connectors": [
    {
      "Start": "0d85e0b7bed4475796a3bafd561b81dd",
      "End": "cd12cc012c3744b0b76813137082cca1",
      "Id": "a600fa1f191a41ec824d3c421dd07c89",
      "IsHidden": "False"
    },
    {
      "Start": "775a143f6c834a56ad3b77e60e9a3c2e",
      "End": "58b03b72fe034ba9bb64a05e3c35acc6",
      "Id": "beaa457d31dd479cbfd23b52b03a4e28",
      "IsHidden": "False"
    },
    {
      "Start": "253e73dc4d3441fb81ecf25cf4d0f8a0",
      "End": "55974f71b2b4477695d46d806e1bebe5",
      "Id": "028e9ef542394c5eb3935857ad37d328",
      "IsHidden": "False"
    },
    {
      "Start": "8297ab8f58b141d18f82708a49dccd20",
      "End": "c6c172909dad4abaa821edea96193a01",
      "Id": "6d81d1a93194431096211e3a192c7ed4",
      "IsHidden": "False"
    },
    {
      "Start": "bcbe933082124965b54f170c52217e0a",
      "End": "ac8eb70d892d423b9955d46412e948c3",
      "Id": "6d678ebc84054353bd59ba12b6818e2d",
      "IsHidden": "False"
    },
    {
      "Start": "bcbe933082124965b54f170c52217e0a",
      "End": "ad596d47c1014cbd8d43f7e95faa471c",
      "Id": "3bb8e3a3dffa4eaa993f9f925136ba48",
      "IsHidden": "False"
    },
    {
      "Start": "bcbe933082124965b54f170c52217e0a",
      "End": "d277f7f74c654c39945ec84045bab329",
      "Id": "f7554eb061ab4e5e9cc253b2f0b0950f",
      "IsHidden": "False"
    },
    {
      "Start": "bcbe933082124965b54f170c52217e0a",
      "End": "c8622142e2534041972daec88ceca5a2",
      "Id": "0e88249dbf0a4697bc5085150970e903",
      "IsHidden": "False"
    },
    {
      "Start": "e142a1a0b75f47aa9fd28bc7474ce297",
      "End": "b0e97b56ef484058992d9f687d88a07b",
      "Id": "8eea12c88b394fdaa2320aab878a108c",
      "IsHidden": "False"
    },
    {
      "Start": "c200597f1e8b4452b97c929356169c11",
      "End": "399702e64fb84e12af5d110a641c8766",
      "Id": "6520619d372e4ae7bd6392cec338d83a",
      "IsHidden": "False"
    },
    {
      "Start": "7814654e0b2747b782f5417ae46333bf",
      "End": "e0b57a567c934fb9af736a8f57a1c40e",
      "Id": "606b25bc8fc94dcea43605c27aae2625",
      "IsHidden": "False"
    },
    {
      "Start": "beff9161b6e2455ea54b51749add5752",
      "End": "d288dae708824d94be0e776cee1c1682",
      "Id": "7ffc3c471b494d3b95b4136f1edc7201",
      "IsHidden": "False"
    },
    {
      "Start": "c0d5156b61cf40bbb8317014eaf55368",
      "End": "baee6100e11d4273a7f7abffa440ab4e",
      "Id": "426fe99b41394353acf9ecd2d3f86005",
      "IsHidden": "False"
    },
    {
      "Start": "a9c9eef4ffd5426fb4255d6670424a22",
      "End": "28e0b89477944995ab9ddb8a685cefec",
      "Id": "8bec65dd3b3d4eaeaf1ca52047676556",
      "IsHidden": "False"
    },
    {
      "Start": "16fa0e9b133846c98c3a0ff65a5f9589",
      "End": "b6ab22ca9a154693a96f410a0c6be439",
      "Id": "7aebe41de7174edd8b8561cb6a822572",
      "IsHidden": "False"
    },
    {
      "Start": "16fa0e9b133846c98c3a0ff65a5f9589",
      "End": "fe24ecdf404243a592594008bd87751a",
      "Id": "a4e4e73dddf146a585b29dc81d2957d2",
      "IsHidden": "False"
    },
    {
      "Start": "1cd8b57d939042fe8bdeb0214518611e",
      "End": "c6f0d29778614df3817d5ff626d74f47",
      "Id": "7fd862c99fa04f4b93fcb2610eff0063",
      "IsHidden": "False"
    },
    {
      "Start": "cf104ffaeb0f4b11953fffb305aacba2",
      "End": "1fa3ac6bf7bd46688aa9e144423dd7d4",
      "Id": "1608fe8574564c04965a3023354f83dc",
      "IsHidden": "False"
    },
    {
      "Start": "cb943230de1349a1abfefe77344f4b17",
      "End": "6f6d5f4f752d49628a84a523446009c8",
      "Id": "cd981798699842bc8b1fe597cf4b515f",
      "IsHidden": "False"
    },
    {
      "Start": "0f8e46dfe49c496183b001e3a42501d9",
      "End": "7e9a302a8a41473a9117de18b5d33655",
      "Id": "4c24f7d468ea4c4d8ca3729891ee40f5",
      "IsHidden": "False"
    },
    {
      "Start": "a35737f79d614ee8bb1d5de10fb180b6",
      "End": "b0b812cc65bf45d1a05d3ae572c74456",
      "Id": "176951ae95154a31badb20c7258e6edc",
      "IsHidden": "False"
    },
    {
      "Start": "a35737f79d614ee8bb1d5de10fb180b6",
      "End": "14bb3b242bed4dca8bdb30a706c3c2af",
      "Id": "6995c1b6123d4dd883a2a2813b455c0c",
      "IsHidden": "False"
    },
    {
      "Start": "a1878df77cdc48ddadb0a599de312411",
      "End": "06f8da9cb5f6428eac8c88d7e367052b",
      "Id": "3d65364a3e134cd9a0bda90f40ed5e97",
      "IsHidden": "False"
    },
    {
      "Start": "c7cf2f97f9f049369bf3d570b04a6ce5",
      "End": "c3dc53adf2234762882b2557076b2543",
      "Id": "449b27322cba4e1493d30cbbaec512ad",
      "IsHidden": "False"
    },
    {
      "Start": "c48726ee2cf148bebe4eeba0034c75fe",
      "End": "db4066b4f7dd4c66b342e9b654d86a7f",
      "Id": "8c40a7ccfaf14c94b0ddbcb0276775ee",
      "IsHidden": "False"
    },
    {
      "Start": "c48726ee2cf148bebe4eeba0034c75fe",
      "End": "93cae8d5e971465a94800da8d7b22657",
      "Id": "fbaf7217f5d8452b9447f9fe4eb1d6a7",
      "IsHidden": "False"
    },
    {
      "Start": "c48726ee2cf148bebe4eeba0034c75fe",
      "End": "59b90c6672074f72928a2e3c28e4bc5d",
      "Id": "2960d384f873422a95b287baa4060525",
      "IsHidden": "False"
    },
    {
      "Start": "c48726ee2cf148bebe4eeba0034c75fe",
      "End": "1f29eebfdb5d4921b0db3637e9ef5b12",
      "Id": "899d3d2b91934b7f93b16af41df5b690",
      "IsHidden": "False"
    },
    {
      "Start": "c48726ee2cf148bebe4eeba0034c75fe",
      "End": "fb5b8ddb80314cc9bb661b71b75c5c3e",
      "Id": "37ef73e1d99d4e5f9aff10f886c8bdad",
      "IsHidden": "False"
    },
    {
      "Start": "df151c94c0694ed89ce547035b86fe61",
      "End": "00a0a9af5217441dba4185b228187b95",
      "Id": "116596d36a2246c3a0bd835759ec2f79",
      "IsHidden": "False"
    },
    {
      "Start": "df151c94c0694ed89ce547035b86fe61",
      "End": "a9c7d6fbc9b84079a08f87d65dfd96ab",
      "Id": "02f0e16eaf324ada905912b1bf4b0fed",
      "IsHidden": "False"
    },
    {
      "Start": "d7ffad3c634840e5a9f540ac09c4c11e",
      "End": "0f87f000683e401199052497a360e54e",
      "Id": "0796995d0a9745cf9825b3460e8511fa",
      "IsHidden": "False"
    },
    {
      "Start": "ddfc80aed85f4c6fb00afeb39be9d168",
      "End": "98d055bbd3e542508cda06ed20adbc67",
      "Id": "f206d1c618a3459e8f9aed7e161ded69",
      "IsHidden": "False"
    },
    {
      "Start": "ddfc80aed85f4c6fb00afeb39be9d168",
      "End": "a4c60378f6bc409381509e573d7daa57",
      "Id": "0df2fc473ddb42c7803423b47b05e3bd",
      "IsHidden": "False"
    },
    {
      "Start": "1a7eede2aa1b42d89720bf81bbc3324f",
      "End": "0d19ab06e066416abf9e4c111a9b5c7f",
      "Id": "494521f1fa4343dda929e707675c5470",
      "IsHidden": "False"
    },
    {
      "Start": "86ee8b7f44274229ae20a7cdc1a094af",
      "End": "eddda68331924ac28a9587021664a47a",
      "Id": "283498e4d16941bb8fdc963b8baa35fe",
      "IsHidden": "False"
    },
    {
      "Start": "4dac78003b9541fd9cc761c73e5457e9",
      "End": "709be89a9b13419e9a24f11ead4e5349",
      "Id": "637e0f0baa4242b08a3ead0e35458e9b",
      "IsHidden": "False"
    },
    {
      "Start": "4dac78003b9541fd9cc761c73e5457e9",
      "End": "b365de49e5cc48748aff14c3a12d722a",
      "Id": "040743b50a054b1fb26d448109c2421d",
      "IsHidden": "False"
    },
    {
      "Start": "21610c6d72d446b9acd0b3592b1f0f5d",
      "End": "67017dd0791a45119daa766b611aa6bb",
      "Id": "766639422474477a82af7774567a5e46",
      "IsHidden": "False"
    },
    {
      "Start": "c81a722cd76445f2bc0a43c9fac3a8e2",
      "End": "e6478c505f544273a9b768eead211ce5",
      "Id": "b294c7241bf3439f9f6ce132af116f9b",
      "IsHidden": "False"
    },
    {
      "Start": "02f6d9661e1a4f0087f2ab0e3fb91533",
      "End": "62ff63d5f54e4be89ee9d98d1e98976b",
      "Id": "c85c192de03e48318cab939623208e10",
      "IsHidden": "False"
    },
    {
      "Start": "02f6d9661e1a4f0087f2ab0e3fb91533",
      "End": "2b70a36b22514bcb8dcc61ddde556fec",
      "Id": "ad45aad4a4a84522a4ad39e9b3249127",
      "IsHidden": "False"
    },
    {
      "Start": "022827826a2d4c4ab6ec325a610b28f7",
      "End": "5a3f250866f348898221c5c2b4487213",
      "Id": "bac06e716c6645c1b673b849b1926d19",
      "IsHidden": "False"
    },
    {
      "Start": "c6c97c2667a8498c836dce3517799b2d",
      "End": "6432dfef41084ddaa5f9224f4fe25b95",
      "Id": "9208de75146a404fbcc488e76704af89",
      "IsHidden": "False"
    },
    {
      "Start": "590a8bdb7d7946dabdab58e3f07e3f6b",
      "End": "b91c9e6ab1794f9dbb7acd872226521b",
      "Id": "412d0f0c8ad7419aad96e734aa97e2e1",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.13",
      "Data": {}
    }
  ],
  "Author": "Autodesk",
  "Linting": {
    "activeLinter": "None",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [
    {
      "NodeId": "7755d6a1-1224-4e72-ac8f-71620c0b1f14",
      "Binding": {
        "ByStartPointEndPoint_InClassDecl-1_InFunctionScope-1_Instance0_7755d6a1-1224-4e72-ac8f-71620c0b1f14": ""
      }
    },
    {
      "NodeId": "666412db-d9a8-4f2c-8538-e60fc2f83318",
      "Binding": {
        "ByStartPointEndPoint_InClassDecl-1_InFunctionScope-1_Instance0_666412db-d9a8-4f2c-8538-e60fc2f83318": ""
      }
    }
  ],
  "View": {
    "Dynamo": {
      "ScaleFactor": 100.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.17.0.3472",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "_Background Preview",
      "EyeX": -30057.80075903983,
      "EyeY": 36523.254370470233,
      "EyeZ": 132180.29969733834,
      "LookX": 29098.38864966483,
      "LookY": -31523.254370470233,
      "LookZ": -140642.21180671334,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Name": "Surface.ByRevolve",
        "ShowGeometry": false,
        "Id": "7543f3425b4b4f5699cb8f3277034772",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1297.1526084982897,
        "Y": 4597.927180321667
      },
      {
        "Name": "Line.ByStartPointEndPoint",
        "ShowGeometry": true,
        "Id": "d4c9ae2ca651431eaa0ab9f9c1f37ddc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 926.15260849828974,
        "Y": 4597.927180321667
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "24f74ee9311f430ca70f0d2635bf4502",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 443.15260849828974,
        "Y": 4688.7546803216674
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "18484e70a95c49778b42294f5aa4a17f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 443.15260849828974,
        "Y": 4540.7546803216674
      },
      {
        "Name": "Input surface",
        "ShowGeometry": false,
        "Id": "e355669081764a71aaaa3f7cbdb8525e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2332.438963725439,
        "Y": 4582.1773923486808
      },
      {
        "Name": "Curve.ByIsoCurveOnSurface",
        "ShowGeometry": false,
        "Id": "cb27966ffad644a7861e7172f40dae60",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2637.438963725439,
        "Y": 4423.7636423486811
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "e1746c936b554e588b1c7ef7df8de755",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2332.438963725439,
        "Y": 4434.5911423486814
      },
      {
        "Name": "Curve.ByIsoCurveOnSurface",
        "ShowGeometry": false,
        "Id": "e23beeda2e144601ac3175133a885908",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2637.438963725439,
        "Y": 4647.7636423486811
      },
      {
        "Name": "List.Flatten",
        "ShowGeometry": false,
        "Id": "8543d6ac120241c4989e1a243e398ac4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3020.438963725439,
        "Y": 4440.7636423486811
      },
      {
        "Name": "List.Flatten",
        "ShowGeometry": false,
        "Id": "c08c05a5b5a845ac8e9ed6f3b64aa3f2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3020.438963725439,
        "Y": 4630.7636423486811
      },
      {
        "Name": "Number",
        "ShowGeometry": true,
        "Id": "0a239b91589c434fbc5b175e539fd63c",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2332.438963725439,
        "Y": 4285.7636423486811
      },
      {
        "Name": "Divisions on Y direction",
        "ShowGeometry": true,
        "Id": "88f74a7e1a5b4eaaad053b5f48764497",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1889.438963725439,
        "Y": 4502.1773923486808
      },
      {
        "Name": "Divisions on X direction",
        "ShowGeometry": true,
        "Id": "b12d0e8a56c043b2a82984be33e4c96b",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1889.438963725439,
        "Y": 4889.5911423486814
      },
      {
        "Name": "Geometry.Intersect",
        "ShowGeometry": false,
        "Id": "37e5bfec59f44aa98789464651a8b7c0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3310.438963725439,
        "Y": 4518.7636423486811
      },
      {
        "Name": "Number",
        "ShowGeometry": true,
        "Id": "f6edf081aa6c43bca02c47c47afd392b",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2332.438963725439,
        "Y": 4741.7636423486811
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "73ffd2271e734b6fbc906f5ca634ccb6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2332.438963725439,
        "Y": 4889.5911423486814
      },
      {
        "Name": "List.Flatten",
        "ShowGeometry": false,
        "Id": "f1e1c03edf954af5813b47515df36cdf",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3657.438963725439,
        "Y": 4518.7636423486811
      },
      {
        "Name": "List.Count",
        "ShowGeometry": true,
        "Id": "840bc3fd7e354bdbb2f87b09427af2ee",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3947.438963725439,
        "Y": 4535.7636423486811
      },
      {
        "Name": "/",
        "ShowGeometry": true,
        "Id": "cf379fb3c60641b1bbdb3056dafab557",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4209.438963725439,
        "Y": 4535.7636423486811
      },
      {
        "Name": "List.Chop",
        "ShowGeometry": false,
        "Id": "ab3e84b737fd4a439ce1b986dcdfa6f5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4482.438963725439,
        "Y": 4501.7636423486811
      },
      {
        "Name": "List.Count",
        "ShowGeometry": true,
        "Id": "74d9e44422aa493abd1e99ed94e1347e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4777.438963725439,
        "Y": 4478.2205173486809
      },
      {
        "Name": "Python Script",
        "ShowGeometry": true,
        "Id": "bf3bc1920fc943108df5f2bf992fcc57",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5324.438963725439,
        "Y": 4829.4186423486808
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "eca53342d4fc4582b75be7f336240cc0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5609.438963725439,
        "Y": 4829.4186423486808
      },
      {
        "Name": "Vector.ZAxis",
        "ShowGeometry": true,
        "Id": "45385228d515483d83be3fcf8d4c80d4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4901.3499889912573,
        "Y": 4814.5442582136329
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "9c56e6ad865a4d16a2fdfef615f8266e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5324.438963725439,
        "Y": 4354.7636423486811
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "11690a018ee343f0ab9d341239c83e44",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5039.438963725439,
        "Y": 4601.6773923486808
      },
      {
        "Name": "List.GetItemAtIndex",
        "ShowGeometry": true,
        "Id": "55f265ac94204639b9bab2cb52330eb6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5609.438963725439,
        "Y": 4322.9361423486807
      },
      {
        "Name": "List.GetItemAtIndex",
        "ShowGeometry": true,
        "Id": "9648bb997c864ff3890d7df52c80aa7d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6276.438963725439,
        "Y": 4633.9361423486807
      },
      {
        "Name": "Code Block",
        "ShowGeometry": true,
        "Id": "f2f24be1fd3743d8a94f1cbc67e07def",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5324.438963725439,
        "Y": 4501.7636423486811
      },
      {
        "Name": "List.Flatten",
        "ShowGeometry": true,
        "Id": "96954312c3fd4cbc80cf77a713ae8e61",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5609.438963725439,
        "Y": 4499.9361423486807
      },
      {
        "Name": "List.Flatten",
        "ShowGeometry": true,
        "Id": "22a7a06f9b604c6c90d842df29eae9be",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5932.438963725439,
        "Y": 4348.9361423486807
      },
      {
        "Name": "Surface.NormalAtPoint",
        "ShowGeometry": true,
        "Id": "c76d13c724ff46deaa1adc9d4e8686c6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5932.438963725439,
        "Y": 4526.9361423486807
      },
      {
        "Name": "Surface.NormalAtPoint",
        "ShowGeometry": true,
        "Id": "6102cda0da684d4e8ca4c9e23ae2f537",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5932.438963725439,
        "Y": 4879.9361423486807
      },
      {
        "Name": "StraightBeam.ByStartPointEndPoint",
        "ShowGeometry": true,
        "Id": "7755d6a112244e72ac8f71620c0b1f14",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6276.438963725439,
        "Y": 4386.9361423486807
      },
      {
        "Name": "StraightBeam.ByStartPointEndPoint",
        "ShowGeometry": true,
        "Id": "666412dbd9a84f2c8538e60fc2f83318",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6276.438963725439,
        "Y": 4811.9361423486807
      }
    ],
    "Annotations": [
      {
        "Id": "f37425cafa6844b891d2e1a8379e7b1b",
        "Title": "Input Surface",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "7543f3425b4b4f5699cb8f3277034772",
          "d4c9ae2ca651431eaa0ab9f9c1f37ddc",
          "24f74ee9311f430ca70f0d2635bf4502",
          "18484e70a95c49778b42294f5aa4a17f"
        ],
        "HasNestedGroups": false,
        "Left": 433.15260849828974,
        "Top": 4490.7546803216674,
        "Width": 1124.0,
        "Height": 386.17249999999967,
        "FontSize": 14.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": 4540.7546803216674,
        "InitialHeight": 293.0,
        "TextblockHeight": 40.0,
        "Background": "#FFBB87C6"
      },
      {
        "Id": "0b63c0b8b45c4c47afe257fd74b8a6b0",
        "Title": "Grid of beams",
        "DescriptionText": null,
        "IsExpanded": true,
        "WidthAdjustment": 0.0,
        "HeightAdjustment": 0.0,
        "Nodes": [
          "e355669081764a71aaaa3f7cbdb8525e",
          "cb27966ffad644a7861e7172f40dae60",
          "e1746c936b554e588b1c7ef7df8de755",
          "e23beeda2e144601ac3175133a885908",
          "8543d6ac120241c4989e1a243e398ac4",
          "c08c05a5b5a845ac8e9ed6f3b64aa3f2",
          "0a239b91589c434fbc5b175e539fd63c",
          "88f74a7e1a5b4eaaad053b5f48764497",
          "b12d0e8a56c043b2a82984be33e4c96b",
          "37e5bfec59f44aa98789464651a8b7c0",
          "f6edf081aa6c43bca02c47c47afd392b",
          "73ffd2271e734b6fbc906f5ca634ccb6",
          "f1e1c03edf954af5813b47515df36cdf",
          "840bc3fd7e354bdbb2f87b09427af2ee",
          "cf379fb3c60641b1bbdb3056dafab557",
          "ab3e84b737fd4a439ce1b986dcdfa6f5",
          "74d9e44422aa493abd1e99ed94e1347e",
          "bf3bc1920fc943108df5f2bf992fcc57",
          "eca53342d4fc4582b75be7f336240cc0",
          "45385228d515483d83be3fcf8d4c80d4",
          "9c56e6ad865a4d16a2fdfef615f8266e",
          "11690a018ee343f0ab9d341239c83e44",
          "55f265ac94204639b9bab2cb52330eb6",
          "9648bb997c864ff3890d7df52c80aa7d",
          "f2f24be1fd3743d8a94f1cbc67e07def",
          "96954312c3fd4cbc80cf77a713ae8e61",
          "22a7a06f9b604c6c90d842df29eae9be",
          "c76d13c724ff46deaa1adc9d4e8686c6",
          "6102cda0da684d4e8ca4c9e23ae2f537",
          "7755d6a112244e72ac8f71620c0b1f14",
          "666412dbd9a84f2c8538e60fc2f83318"
        ],
        "HasNestedGroups": false,
        "Left": 1879.438963725439,
        "Top": 4235.7636423486811,
        "Width": 4770.0,
        "Height": 808.17249999999967,
        "FontSize": 14.0,
        "GroupStyleId": "00000000-0000-0000-0000-000000000000",
        "InitialTop": 4285.7636423486811,
        "InitialHeight": 748.82750000000033,
        "TextblockHeight": 40.0,
        "Background": "#FFC1D676"
      }
    ],
    "X": -98.7546680908743,
    "Y": -1036.7780503200092,
    "Zoom": 0.30197845139518015
  }
}